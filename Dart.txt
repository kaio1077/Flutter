Dart
Dart Básico: declarar variáveis, operadores aritméticos, relacionais e lógicos, controle de fluxo if/else e Switch (case), Loops while, for.
Dart Intermediário: Funções, parâmetros e funções anônimas, classes, construtor, herança, getters and setters.
Dart Avançado: sobrescrita de métodos, classes abstratas, modificadores static e final, interface, coleções - listas e mapas.
Executar os comandos no seguinte site: https://www.dartpad.dev/?null_safety=true

// Tipos de variáveis
var = é um inferência de variável o Dart entende automaticamente o tipo de variável.
String = é do tipo texto.
INT = do tipo números inteiros.
Double = números decimais.
bool = verdadeiro ou falso
dynamic = significa que pode ser modificado a todo momento

// Operadores aritméticos
+ Adição
- Subtração
* Multiplicação
/ Divisão

Exemplos: 
Adição
numero = numero + 1, eu poderia copiar igualmente
numero += 1 ou numero++. O primeiro caso usaria para números maiores que 1, pois é mais simples utilizar ++

Subtração
numero = numero - 1;
numero-- O modo mais rápido para utilizar a expressão acima

Multiplicação
numero = numero * 1
numero *= 1; Não é possível usar a expressão ** ou // então esta seria a única forma

Divisão
numero = numero / 1
numero /= 1;

// Operadores relacionais
> maior
< menor
>= maior ou igual
<= menor ou igual
== igual
!= diferente

// Operadores lógicos
&& - e
|| - ou
! = negação

// Declarar a variável no print
void main() {
  var numero1 = 5;
  var numero2 = 2;
  var total = numero1 + numero2;
  
  print ('A soma é $total ou ${total}');  // A segunda forma (este método) é utilizada para atributos de classes
}

// Arrays
void main() {
  var nomes = ['Kaio', 'Augusto', 'Bete']; // posição 0, 1, 2
  print (nomes[2]); // resposta Bete
}

// IF-ELSE
void main() {
  var idade = 18;
  
  if (idade < 14) {
    print ('É uma criança');
  }
  else if (idade < 18) {
    print ('É um adolescente');
  }
  else {
    print ('É um adulto');
  }
}

// SWITCH
void main() {
  var comando = 'sacar';
  
  switch (comando){
    case 'depositar':
      print('Deposite um valor');
      break;
    case 'sacar':
      print('Faça um saque');
      break;
    default :
      print ('Nenhuma das opções escolhidas');
  }
}

// LOOP - While e For, do-while
void main() {
  var numero = 1;
  while (numero < 5) {
    print('Executando $numero');
    numero++;
  }
  
  var number = 5;
  while (number > 1){
    print('Executando $number');
    number--;
  }
}

void main() {
  for (int numero=1; numero<=5; numero++){
    print ('Executando $numero');
  }
}

void main() {
  var postagens = ['Viagem entre amigos para a praia',
                  'Natal em família!!',
                  'Almoço de domingo na casa da mãe!'];
  
  for (var postagem in postagens){
    print ('Título: $postagem');
    print ('----------');
  }  
}

void main() {
 // do faz primeiro uma execução depois entra nas condições do while
  var numero = 1; // Se testasse com 10, imprimiria o 10 e finalizaria o aplicativo por não satisfazer a condição while
  do {
    print('Executado $numero');
    numero++;
  } while (numero <= 5);
}

Dart Intermediário e Avançado
Funções: blocos de código que executam uma determinada ação

void exibirDados(String nome, {int idade, double altura}) {  // Colchetes dentro do parâmetros torna as variáveis opcionais
  int novaIdade = idade ?? 0; // Por padrão os valores opcionais não inseridos aparecem 'null', com o ?? eu padronizo para ser o valor escolhido por mim
  print ('Mostrar $nome, $novaIdade, $altura');
  
}
void main (){
  exibirDados('Kaio');
//exibirDados('Kaio', idade:20, altura:1.75); // É necessário colocar o parâmetro da função acima seguidos de 2 pontos e o valor. Ex: idade:99
}
_____________________________________________________________
void exibirMensagem(String nome, int idade){ // obs: void não retorna dados para o local que é chamada, apenas na main
  print ('Alerta, você não preencheu todos os campos $nome!');
  print ('Sua idade é: $idade');
}

void main() {
  exibirMensagem('Kaio', 28);
  exibirMensagem('Pedro', 45);
}
_________________________________________________________________
void calcularSalario(double salario, double bonus){
  var total = salario - (salario * 0.1) + bonus;
  print ('Salário total: $total');
}

void main() {
  calcularSalario(1000, 500);
}

_________________________________________________________________
Função com return

double calcularSalario(double salario, double bonus){
  var total = salario - (salario * 0.1) + bonus;
  return total;
}

void main() {
  double resultado = calcularSalario(1000, 500);
  print ('Salário total: $resultado');
}
_________________________________________________________________
double calcularSalario(double salario){
  var total = salario - (salario * 0.1);
  return total;
}

void main() {
  double bonus = 500;
  double resultado = calcularSalario(1000);
  double total = resultado + bonus;
  print ('Salário total: $total');
}
____________________________________________________
double calcularSalario(double salario) => // Seria a mesma coisa que o exemplo de cima o => significa return no calcularSalario
  salario - (salario * 0.1);				// Obs: indicado para uma linha, com muitas linhas fazer o exemplo acima

void main() {
  double bonus = 500;
  double resultado = calcularSalario(1000);
  double total = resultado + bonus;
  print ('Salário total: $total');
}

Funções anônimas e parâmetros: funções com parâmetros que são opcionais. 
Os colchetes {} dentro dos parâmetros os torna opcionais, nas atualizações recentes é obrigatório inicializar um valor para os parâmetros opcionais.

void exibirDados (String nome, {int idade = 0, double altura = 0}){ 
  print('nome: $nome');
  print('idade: $idade');
  print('altura: $altura');
}

void main (){
  exibirDados ('Kaio', idade: 28, altura: 1.75); // // Sempre passar os parâmetros opcionais por último e nunca poderei adicionar novos parâmetros após os parâmetros opcionais
}
_________________________________________________________________
Um modo sem a Function como parâmetro tendo a mesma resposta para exemplificar as diferenças

void calcularBonus(){
  print('Seu bônus é de 20.');
}
void calcularSalario(double salario){
  print('Seu salário é: $salario.');
}

void main (){
  calcularSalario(100); 
  calcularBonus();
}
_________________________________________________________________
Este modo com o parâmetro Function serve para eu não precisar fazer uma chamada a mais de outra função e colocar a calcularBonus dentro do calcularSalario.

void calcularBonus(){
  print('Seu bônus é de 20.');
}
void calcularSalario(double salario, Function funcaoParametro){
  print('Seu salário é: $salario.');
  funcaoParametro();
}

void main (){
  calcularSalario(100, calcularBonus); // Supondo que o calcularBonus fosse feita de maneiras diferentes para cada funcionário, o melhor seria fazer uma função anônima para não...
										// ...ter que criar várias funções CalcularBonus1, 2, 3 e assim por diante.
}
_________________________________________________________________
Função anônima: quando é necessário criar uma função customizada para cada entrada diferente. Ex: um botão que pressionando-o traz opções de funcionalidade.
void calcularBonus(){
  print('Seu bônus é de 20.');
}
void calcularSalario(double salario, Function funcaoParametro){
  print('Seu salário é: $salario.');
  funcaoParametro();
}

void main (){
  calcularSalario(100, (){
    print('Cálculo customizado');
  }); 
}

Classes e Objetos
Classe define um modelo, um template para a construção de um objeto.
Objeto possuem os atributos (características) do objeto.
Métodos definem as ações do objeto. Basicamente uma função (sintaxe), só que dentro de uma classe é chamada de método

Ex: a planta da casa(conceito) seria a classe, objetos são as características da casa (porta, janela, luzes) e métodos as ações dos objetos (abrir, fechar porta e/ou janela,
ligar/apagar luzes.

// Classe
class Casa {
  // Objetos (Atributos)
  String cor = '';
  
  // Métodos
  void abrirJanela(int qtdJanelas){
    print ('Abrir janela da casa $cor');
    print ('Abrir $qtdJanelas janelas da casa');
  }
  
  void abrirPorta(int qtdJanelas){
    print ('Abrir porta da casa $cor');
  }
}

void main (){
  Casa minhaCasa = Casa();
  minhaCasa.cor = 'amarela';
  minhaCasa.abrirJanela(5);
  minhaCasa.abrirPorta(2);
  
  Casa minhaCasa2 = new Casa();
  minhaCasa2.cor = 'vermelha';
  minhaCasa2.abrirJanela(3);
  //print (minhaCasa.cor);
}

// Uso do this para referenciar métodos ou objetos dentro da própria classe
// Classe
class Casa {
  // Objetos (Atributos)
  String cor = '';
  
  // Métodos
  void abrirJanela(){
    print ('Abrir janela da casa $cor');
  }
  
  void abrirPorta(){
    print ('Abrir porta da casa $cor');
  }
  
  void abrirCasa(){      // é possível receber parâmetros
    this.abrirJanela();
    this.abrirPorta();
  }
}

void main (){
  Casa minhaCasa = Casa();
  minhaCasa.cor = 'amarela';
// minhaCasa.abrirJanela(); Apenas como lembrete que esta linha e a de baixo são opcionais.
// minhaCasa.abrirPorta();
  minhaCasa.abrirCasa(); // Usando o this dentro da classe eu pude chamar apenas 1 método para executar os 2 métodos (abrirJanela e abrirPorta)
}
____________________________________________________
Um programa que verifica se a senha é igual a de um banco de dados para login no app
class Usuario {
  String usuario = '';
  String senha = '';
  
  void autenticar (){
    // Recuperar de um Banco de Dados
    var usuario1 = 'kaio';
    var senha1 = '123456';
    
    if (this.usuario ==  usuario && this.senha == senha) { 		// this se refere ao objeto (atributos) da classe: usuario e senha. 
      print ('Autenticado');									// e o usuario e senha da comparação é da variável criada dentro do método autenticar
    }else{
      print ('Não autenticado');
    }
  }
}

void main (){
  Usuario c = new Usuario();
  c.usuario = 'kaio';
  c.senha = '123456';
  
  c.autenticar();
}
____________________________________________________
Construtores: método especial utilizado para dar uma configuração inicial ao seu objeto, ou seja, uma preparação do objeto.

class Usuario {
  String usuario = '';
  String senha = '';
  
  Usuario(String usuario, String senha){  // Aqui é o Construtor e será o mesmo nome da classe pois instanciaremos na main, poderia colocar this.usuario dentro dos parêntesis (this.usuario, this.senha)
    this.usuario = usuario;
    this.senha = senha;
    print ('Configurações iniciais do objeto');
  }  
  // Por padrão é sempre criado um construtor e é automaticamente chamado
  
  // Recuperaçao do banco de dados
  void autenticar () {
    var usuario = 'kaio';
    var senha = '12345';
    
    if (this.usuario == usuario && this.senha == senha){
      print ('Usuário autenticado');
    }
    else {
      print ('Usuário não autenticado');
    }
  }
}

void main (){
  Usuario c = new Usuario ('kaio', '12345'); // Será passado como parâmetro os dados do Construtor
  // configurações de valores padrões, carregamento de informações necessárias para o objeto, verificação se o usuário está conectado na internet, etc...
  
  c.autenticar();
____________________________________________________
Named Constructor: construtor nomeado
class Usuario {
  String usuario = '';
  String senha = '';
  String cargo = '';
  
  Usuario (this.usuario, this.senha) {  
  }
  
  // Named Constructor
  Usuario.diretor (this.usuario, this.senha) {
    this.cargo = 'diretor';
    print ('Libera privilégios para o ' + this.cargo); // Outra maneira de imprimir a variável. '+' junta 2 textos. Deu erro quando tenta fazer $this.cargo. É preciso fazer fora das '';
    
  }
  
  void autenticar() {
    var usuario = 'kaio';
    var senha = '12345';
    
    if (this.usuario == usuario && this.senha == senha) {
      print ('Usuário autenticado');
    }
    else {
      print ('Usuário não autenticado');
    }
  }
}


void main () {
  Usuario c = new Usuario ('kaio', '123456');
  Usuario usuarioDiretor = Usuario.diretor('kaio', '12345');
  c.autenticar();
}

____________________________________________________
Getter (obter) e Setter (configurar): serve para proteger as variáveis. Como private no Java.
class Conta {
  double saldo = 0;
  double _saque = 0; // variável com _ é uma boa prática para ela não ser acessada diretamente na main, apenas na classe com get e set
  // Getter -> Obter
  double get saque1{ //Obs: coloquei o número a frente para diferenciar na principal, mas o normal eu faria double get saque e set saque.
    // Validações
    
    return this._saque;
  }
  // Setter -> Configurar
  set saque2(double saque) {
    if (saque > 0 && saque <= 500){
      this._saque = saque;
    }
  } 
}

void main () {
  Conta c = new Conta();
  c.saque2 = 100; // ->(SET) // Se o saque for maior que o valor de if por padrão ele mostrará o valor inicializado = 0.
// Ao atribuir um valor, utilizamos o nome do método SET.  
  print (c.saque1); // ->(GET) // agora eu estou utilizando o método GET saque para proteger a variável.
// Obs: ao chamar na principal o get saque, você não traz diretamente o atributo _saque o protegendo.
}

____________________________________________________
Herança: quando você cria um atributo mais amplo (tamanho, peso, cor) e quando for especificar cada objeto(cão e pássaro), utiliza um método específico (latir, voar)
mais os atributos mais amplos herdados.
Obs: não é possível fazer mais de uma herança por classe.
Neste exemplo vemos que o método dormir é utilizado tanto na classe Cão como na classe Pássaro e para evitar esta repetição podemos usar o conceito de herança.
class Cao {
  String cor = '';
  
  void dormir(){
    print ('Dormir');
  }
  
}

class Passaro {
   String cor = '';
  
  void dormir (){
    print ('Dormir');
  }
}

void main (){
 Cao c = new Cao();
 Passaro p = new Passaro();
 
 c.cor = 'Branco';
 print (c.cor);
 
 p.cor = 'Marrom';
 print (p.cor);
}

Aplicando o conceito de herança

class Animal {   // Também chamada de Classe Pai
  String cor = '';
  
  void dormir(){
    print ('Dormir');
  }
}

class Cao extends Animal { // extends estabelece uma relação de herança
  String corOrelha = '';
  void latir (){			// Na classe Cão usamos algo específico da classe como latir, logo deixamos algo específico nas classes filho
    print ('Latir');
  }
}

class Passaro extends Animal { // Também chamada de classe filha
 String corBico = '';
  void voar() {					// Na classe passáro usamos algo específico da classe como voar e deixamos algo mais genérico na classe pai
   print ('Voar');
 }
}

void main (){
 Cao c = new Cao();
 Passaro p = new Passaro();
 
 c.cor = 'Branco';
 print ('Cor do cão: ' + c.cor);
 c.corOrelha = 'Preto';
 print ('Cor da orelha: ' + c.corOrelha);
 c.latir();
  
 p.cor = 'Marrom';
 print ('Cor do pássaro: ' + p.cor);
 p.corBico = 'Branco';
 print ('Cor do bico: ' + p.corBico);
 p.voar();
}
_________________________________________________________________
Sobrescrita de métodos
class Animal {   // Também chamada de Classe Pai
  String cor = '';
  
  void dormir(){
    print ('Dormir');
  }
  
  
  void correr (){
    print ('Correr');
  }
}

class Cao extends Animal { // extends estabelece uma relação de herança
  String corOrelha = '';
  void latir (){
    print ('Latir');
  }
  
  @override // sobrepor
  void correr () {
    print ('Correr como um cão!');
  }
}

class Passaro extends Animal { // Também chamada de classe filha
 String corBico = '';
  void voar() {
   print ('Voar');
 }
 
 @override // Sobrepor
 void correr (){
   print ('Correr como uma ave!');
 }
}

void main (){
 Cao c = new Cao();
 Passaro p = new Passaro();
  
 c.correr();
 p.correr();
}

Uma outra maneira de utilizar a classe pai para algo genérico seria:
class Animal {   // Também chamada de Classe Pai
  String cor = '';
  
  void dormir(){
    print ('Dormir');
  }
  
  
  void correr (){
    print ('Correr como um ');
  }
}

class Cao extends Animal { // extends estabelece uma relação de herança
  String corOrelha = '';
  void latir (){
    print ('Latir');
  }
  
  @override // sobrepor
  void correr () {
    super.correr();
    print ('cão!');
  }
}

class Passaro extends Animal { // Também chamada de classe filha
 String corBico = '';
  void voar() {
   print ('Voar');
 }
 
 @override // Sobrepor
 void correr (){
   super.correr();
   print ('pássaro!');
 }
}

void main (){
 Cao c = new Cao();
 Passaro p = new Passaro();
  
 c.correr();
 p.correr();
}

Sobrescrita de métodos com construtor
class Animal {   // Também chamada de Classe Pai
  String cor = '';
  
  Animal (this.cor){ // Construtor da classe pai
    
  }
  
  void dormir(){
    print ('Dormir');
  }
  
  
  void correr (){
    print ('Correr como um ');
  }
}

class Cao extends Animal { // extends estabelece uma relação de herança
  String corOrelha = '';
  
  Cao(String cor, this.corOrelha) : super(cor); // Chamando o construtor da classe pai
  
  void latir (){
    print ('Latir');
  }
  
  @override // sobrepor
  void correr () {
    super.correr();
    print ('cão!');
  }
}

class Passaro extends Animal { // Também chamada de classe filha
 String corBico = '';
  
  Passaro(String cor, this.corBico) : super(cor);
  
  void voar() {
   print ('Voar');
 }
 
 @override // Sobrepor
 void correr (){
   super.correr();
   print ('pássaro!');
 }
}

void main (){
 Cao c = new Cao('Marrom', 'Branco');
 Passaro p = new Passaro('Vermelho', 'Amarelo');
 
  print ('Pássaro cor: ' + p.cor + '. Cão cor: ' + c.cor + '.');  // print com concatenação
  print ('Pássaro cor: ${p.cor}. Cor do bico: ${p.corBico}.');    // print com o símbolo ${} dentro de um texto
 
}

_________________________________________________________________
Modificadores static e final 
Static: faz com que o atributo ou método seja estático e não precise instanciar a classe na 'main' para instanciar o atributo ou o método. Importante para valores constantes.
Obs: atributos e métodos estáticos consome mais recursos que uma classe instanciada consumiria.
class Configuracoes {
  static String identificadorApp = 'ADF5AS5456AS';
  String notificacaoSom = 'sim';
  
    void configuracoesIniciais () {
		print ('Exibir configurações iniciais);
	}
}

void main () {
  // Configuracoes config = new Configuracoes();  Como visto está como comentário para mostrar que não precisou instanciar a classe.
  print (Configuracoes.identificadorApp);
  print (Configuracoes.notificacaoSom);
  Configuracoes.configuracoesIniciais();
}

Final: o próprio Dart não permite criar novas instâncias para mudar o valor do atributo da variável final, ou seja, o valor é final.
class Conta {
  String valor = '';
}

void main () {
  final Conta c = new Conta(); // ao definir um objeto final, ele não permitirá (error) instanciar mais nada abaixo porque o final é irredutível.
  c.valor = 'Kaio';
  // ao definir 
  c = Conta(); // Instanciei uma nova conta, ele não utilizará o valor antigo, isso causaria o erro do final acima
  
  print (c.valor);
}
obs: programa com erro para demonstrar que depois que definir final não pode ser criado nada abaixo do mesmo objeto.
_________________________________________________________________
Classes abstratas: não permite criar objetos a partir da classe para que ela não instancie, pensando de maneira inteligente aquela que não quero instanciar.
Classe Concreta: aquelas que são instanciadas.

abstract class Animal {     // Classe pai normalmente é apenas uma estrutura para utilizar apenas as classes filhas, ou seja, não é feita as instanciações da classe pai
  String cor = '';
  
  /*
  void correr() {
    print ('Correr');
  }
  */
  // Ao criar um método abstrato, ou seja, sem corpo
  void correr();
  // Dessa maneira eu forço as classes filhas a sobrescrever o método correr para rodar o app
 
}

class Cao extends Animal { // Classe filha
  @override
  void correr(){
    print ('Correr');
  }
  
  void latir () {
    print ('Latir');
  }
}

class Passaro extends Animal { // Classe filha
  @override
  void correr(){
    print ('Correr');
  }
  
  void voar(){
    print ('Voar');
  }
}

void main (){
	Cao c = new Cao();
	c.latir();
	c.correr(); 
  
  /* Geralmente é pouco utilizada esse modo de instanciar a classe pai. 
  Para definir que não seja instanciada definimos a classe como abstrata (abstract)
  Animal a = new Animal();    Por isso este trecho de código está como comentário
  a.cor = 'Marrom';
  a.correr();
  print (a.cor);
  */

}
_________________________________________________________________
Interface: a grosso modo, é um contrato que quando assumido por uma classe deve ser implementado.
Interface é utilizada pois podemos ter muitos objetos e/ou classes que podem possuir a mesma ação (métodos)
porém, podem executá-las de maneiras diferentes.
Obs: é possível utilizar mais de uma interface na mesma classe. Diferente de herança que só é permitida uma.

Para criar uma interface é necessário criar uma classe (abstrata) e nas classes que vão recebê-las completará
com implements NomeDaInterface e dentro dos {fazer um override do método da interface}.
Criamos interfaces quando o método é muito diferente em uma diversidade de classes.
Obs: no Dart não escreve interface e terá um nome de class

Ao meu entender, interface é quando precisa criar métodos específicos para uma classe que precisa ser diferente da classe pai.
Ex: Todos somos cidadãos, mas nem todos querem ser políticos, defino uma interface para esta categoria de cidadãos.

// Na linguagem Dart não precisa iniciar com interface
abstract class Presidenciavel {   // Interface 
  void participarEleicao();
  // Desse modo assumiremos como "contrato"
}

abstract class Jornalismo {		// Interface
  void escreverArtigoJornal();   // Normalmente a interface é criada um método sem corpo, porém é possível criar com o corpo(abrir e fechar chaves em vez de ;)
// Fazemos desta maneira sem o corpo na interface, pois criamos com o corpo dentro da classe filha que recebe a interface e é obrigado implementar o método concreto.
}

abstract class Cidadao {
  void direitosDeveres () {
    print ('Todo cidadão tem direitos e deveres');
  }
 
}

class Trump extends Cidadao implements Presidenciavel, Jornalismo {  // Cidadão americano. É possível receber mais de uma interface
    
  @override								// Por receber o implements precisará sobrescrever (override)
  void participarEleicao(){
    print ('Eleição nos Estados Unidos para o Trump');
  }
  
  @override								// Por receber o implements precisará sobrescrever (override)
  void escreverArtigoJornal(){
    print ('Escrever artigo jornal');
  }
}


// Neste caso abaixo eu não quero participar de uma eleição, então será diferente entre mim e o Trump
class Kaio extends Cidadao {   // Cidadão brasileiro
  
}

void main () {
  Trump t = new Trump();
  t.direitosDeveres();
  t.participarEleicao();
  
  Kaio k = new Kaio ();
  k.direitosDeveres();
}
_________________________________________________________________
Mixins: é uma maneira de utilizar códigos (métodos) em múltiplas hierarquias de classes.
O mixin será chamado em outra classe com with NomeDoMixin.
A diferença para a Interface é eu que não sou obrigado a implementar o método para torná-lo concreto, deixo apenas no Mixin.
Mixin é um trecho de código que você quer executar em determinadas classes. Para não colocar na classe pai
pois várias outras classes também herdariam este método. O Mixin é um divisor da herança.

abstract class Presidenciavel { // Interface
  void participarEleicao();
}

abstract class Jornalismo {     // Interface
  void escreverArtigoJornal();
}

mixin Escrita {
  void escreverArtigoJornal(){
    print('Escrever um artigo para o Jornal');
  }
}

abstract class Cidadao {   // Classe pai
  void direitosDeveres(){
    print ('Todo cidadão tem direitos e deveres');
  }
}
  
class Trump extends Cidadao implements Presidenciavel, Jornalismo {
  @override 
  void participarEleicao(){
    print ('Eleição nos Estados Unidos para o Trump');
  }
  
  @override
  void escreverArtigoJornal(){
    print ('Escrever artigo Jornal');
  }
  
}

class Kaio extends Cidadao with Escrita {  // with para adicionar o Mixin na classe
  
}
  
void main (){
  Trump t = new Trump();
  t.direitosDeveres();
  t.participarEleicao();
  
  Kaio k = new Kaio();
  k.direitosDeveres();
  k.escreverArtigoJornal(); // Mixin criado para adicionar apenas no Kaio
}

_________________________________________________________________
Collection ou coleções: são implementações de estruturas de dados, que é utilizado para armazenar itens.
No Dart temos dois tipos de collections: list e maps
- Lista
class Usuario {
  String nome;
  int idade;
  
  Usuario(this.nome, this.idade); // Construtor
}

void main (){
  List<String> frutas = ['Morango', 'Manga'];
   // Lembrando: ver itens por posição
  print (frutas[0]);
  
  List<int> numero = [1, 5, 10];
  // Sem definir o tipo <> é possível armazenar diversos tipos.
  List coisas = [1, 5, 10.5, 'Caixa', 'sapato'];
  
  // adicionar itens
  frutas.add('Melancia');
  // inserir em uma posição
  frutas.insert(0, 'Abacaxi');
  // remover item da lista // remove: exclui baseado no valor do atributo. 
  frutas.removeAt(0); // removeAt: exclui baseado no índice
  // verificar item na lista
  print (frutas.contains("Pera"));
  // tamanho da lista
  print (frutas.length);
  
  // Armazenar objetos (será necessário criar uma classe) 
  Usuario u = new Usuario('Kaio', 28); // Instanciar construtor
  
  List<Usuario> usuarios = List();
  usuarios.add(u);
  usuarios.add(Usuario('Carol', 25)); // não soube add novos usuários sem instanciar na classe principal
  usuarios.add(Usuario('Wesley', 26));

  // for para não ter como resposta Instance of 'Usuario'
  for(Usuario u in usuarios){
    print ('Nome: ${u.nome}, idade: ${u.idade}');
  }
  
  // Simplificando o construtor é a mesma coisa que o modo acima. MELHOR UTILIZAR ESTE MODO
  /* Foi colocado o construtor dentro do usuarios.add
   
   List<Usuario> usuarios = List();
   usuarios.add(new Usuario('Kaio', 28)); // Instanciando dentro da lista. Lembrando 'new' é opcional
   usuarios.add(new Usuario('Carol', 25));
   usuarios.add(new Usuario('Jorge', 30));
  */
_________________________________________________________________
Collections maps (mapas)
void main (){
/*  
  List frutas = ['Morango', 'Manga'];
  print (frutas[0]);
*/
  // Com maps podemos criar um índice customizado. Por padrão é numérico iniciando do 0
  // Map utilizada o conceito: chave -> valor
  Map frutas = new Map(); // objeto map
  frutas['MO'] = 'Morango';
  frutas['MA'] = 'Manga';
//  print (frutas['MO']);
  
  // Ex: chave (inteiro) -> valor (String)
  Map<String, String> estados = new Map();
  estados['SP'] = 'São Paulo';
  estados['MG'] = 'Minas Gerais';
  estados['RJ'] = 'Rio de Janeiro';
  
  /* Tirar o comentário para testar cada print
  print (estados.keys); // recupera apenas as chaves
  print (estados.values); // recupera apenas os valores
  print (estados.containsKey('MA'));
  print (estados.containsValue('São Paulo'));
  print (estados.length);
  print (estados);
 */ 
  // for each abre os valores criados no Map<String, String> e o nome das variáveis nós que damos
  estados.forEach(
    (chave, valor) => print ('$chave = $valor')
  );
  
  // Itens dinâmicos (pode ser número, depois double, depois String, etc...)
  Map <String, dynamic> usuarios = new Map();
  usuarios['nome'] = 'Kaio';
  usuarios['idade'] = 28;
}

